/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   burning_ship.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/22 21:09:27 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:14:07 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	burning_eq(int x, int y, t_data *m)
{
	int			it;
	t_complex	tmp;
	t_complex	z;
	t_complex	cte;

	cte.i = scale((double)y, m->min, m->max, HEIGHT) * m->zoom + m->y;
	cte.r = scale((double)x, m->min, m->max, WIDTH) * m->zoom + m->x;
	z.i = 0;
	z.r = 0;
	it = 0;
	colors(m);
	while (it++ <= m->iteration)
	{
		tmp.r = (z.r);
		z.r = (fabs(z.r) * fabs(z.r) - fabs(z.i) * fabs(z.i)) + cte.r;
		z.i = (2 * fabs(tmp.r * z.i)) + cte.i;
		if (fabs((z.r) * (z.r)) + fabs((z.i) * (z.i)) >= 4)
			return (put_pixel(m, x, y,
					argb(0, m->red, m->green, m->blue)), 0);
		m->red += 10;
		m->blue += 10;
		m->green += 10;
	}
	return (put_pixel(m, x, y, 0x0ffffff), 1);
}

void	burning(t_data *data)
{
	int		y;
	int		x;

	y = 0;
	while (y < HEIGHT)
	{
		x = 0;
		while (x < WIDTH)
		{
			burning_eq(x, y, data);
			x++;
		}
		y++;
	}
	mlx_put_image_to_window(data->mlx, data->window, data->img, 0, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   events_bonus.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 08:47:26 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:14:04 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	ft_close(t_data *data)
{
	mlx_destroy_image(data->mlx, data->img);
	mlx_destroy_window(data->mlx, data->window);
	mlx_destroy_display(data->mlx);
	free(data->mlx);
	write(1, "see ya :)\n", 10);
	exit(0);
	return (0);
}

int	keyboard(int key, t_data *data)
{
	if (key == XK_Escape)
		ft_close(data);
	else if (key == 65451)
	{
		data->iteration += 5;
		ft_putnbr_fd(data->iteration);
		write(1, " iterations \n", 13);
		ft_render(data->fractal, data);
	}
	else if (key == 65453)
	{
		data->iteration -= 5;
		ft_putnbr_fd(data->iteration);
		write(1, " iterations \n", 13);
		ft_render(data->fractal, data);
	}
	else
		k_color(key, data);
	return (0);
}

int	zoom(int button, int x, int y, t_data *data)
{
	(void)x;
	(void)y;
	if (button == 5)
	{
		data->zoom *= 0.95;
		ft_render(data->fractal, data);
	}
	if (button == 4)
	{
		data->zoom *= 1.2;
		ft_render(data->fractal, data);
	}
	return (0);
}

int	move(int key, t_data *data)
{
	if (key == 65363)
	{
		data->x += 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65362)
	{
		data->y -= 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65361)
	{
		data->x -= 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65364)
	{
		data->y += 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	return (0);
}

void	managing(t_data *mlx)
{
	mlx_hook(mlx->window, 17, 0, &ft_close, mlx);
	mlx_hook(mlx->window, 3, (1L << 1), &keyboard, mlx);
	mlx_hook(mlx->window, 2, (1L << 0), &move, mlx);
	mlx_hook(mlx->window, 4, (1L << 2), &zoom, mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   events.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 08:47:26 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:51:34 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	ft_close(t_data *data)
{
	mlx_destroy_image(data->mlx, data->img);
	mlx_destroy_window(data->mlx, data->window);
	mlx_destroy_display(data->mlx);
	free(data->mlx);
	write(1, "see ya :)\n", 10);
	exit(0);
	return (0);
}

int	keyboard(int key, t_data *data)
{
	if (key == XK_Escape)
		ft_close(data);
	else if (key == 65451)
	{
		data->iteration += 5;
		ft_putnbr_fd(data->iteration);
		write(1, " iterations \n", 13);
		ft_render(data->fractal, data);
	}
	else if (key == 65453)
	{
		data->iteration -= 5;
		ft_putnbr_fd(data->iteration);
		write(1, " iterations \n", 13);
		ft_render(data->fractal, data);
	}
	else
		k_color(key, data);
	return (0);
}

int	zoom(int button, int x, int y, t_data *data)
{
	(void)x;
	(void)y;
	if (button == 5)
	{
		data->zoom *= 0.95;
		ft_render(data->fractal, data);
	}
	if (button == 4)
	{
		data->zoom *= 1.2;
		ft_render(data->fractal, data);
	}
	return (0);
}


int	move(int key, t_data *data)
{
	if (key == 65363)
	{
		data->x += 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65362)
	{
		data->y -= 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65361)
	{
		data->x -= 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	else if (key == 65364)
	{
		data->y += 0.2 * data->zoom;
		ft_render(data->fractal, data);
	}
	return (0);
}

void	managing(t_data *mlx)
{
	mlx_hook(mlx->window, 17, 0, &ft_close, mlx);
	mlx_hook(mlx->window, 3, (1L << 1), &keyboard, mlx);
	mlx_hook(mlx->window, 2, (1L << 0), &move, mlx);
	mlx_mouse_hook(mlx->window, &zoom, mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/12 16:21:43 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:30:30 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_H
# define FRACTOL_H

# include <mlx.h>
# include <math.h>
# include <unistd.h>
# include <X11/keysym.h>
# include <stdlib.h>
# include <stdio.h>

# define WIDTH 1000
# define HEIGHT 1000
#define UP 5
#define DOWN 4

typedef struct s_data
{
	void			*img;
	void			*addr;
	void			*mlx;
	void			*window;
	int				bpp;
	int				line_length;
	int				offset;
	int				indean;
	double			min;
	double			max;
	int				iteration;
	unsigned int	red;
	unsigned int	blue;
	unsigned int	green;
	char			**fractal;
	double			x;
	double			y;
	double			zoom;
	unsigned int	r_value;
	unsigned int	b_value;
	unsigned int	g_value;
}	t_data;

typedef struct complex
{
	double	i;
	double	r;
}	t_complex;

double			scale(double n, double min, double max, double old_max);
void			put_pixel(t_data *data, int x, int y, unsigned int color);
unsigned int	argb(unsigned int a, unsigned int r, unsigned int g,
					unsigned int b);
int				ft_close(t_data *data);
void			mandelbrot(t_data *data);
int				mandelbrot_eq(int x, int y, t_data *data);
int				isnum(char *str);
void			handler(void);
int				check_par(char **str, int c);
int				ft_atoi(const char *str);
double			ft_atod(const char *str);
void			julia(double r, double i, t_data *data);
int				r_julia(t_complex c, int x, int y, t_data *data);
void			managing(t_data *mlx);
void			init(t_data *mlx, char **str);
void			fract(t_data *mlx, char **str);
void			ft_render(char **str, t_data *mlx);
void			destroyer(t_data *mlx);
int				ft_strchr(char *s);
void			ft_putchar_fd(char c);
void			ft_putnbr_fd(int n);
void			colors(t_data *mlx);
int				k_color(int key, t_data *mlx);
int				burning_eq(int x, int y, t_data *m);
void			burning(t_data *data);
int				param(char *ch);

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_bonus.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/23 20:33:59 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:12:55 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	init(t_data *mlx, char **str)
{
	mlx->red = 0;
	mlx->blue = 0;
	mlx->green = 0;
	mlx->r_value = 0;
	mlx->g_value = 0;
	mlx->b_value = 0;
	mlx->iteration = 30;
	mlx->max = 2;
	mlx->min = -2;
	mlx->fractal = str;
	mlx->x = 0;
	mlx->y = 0;
	mlx->zoom = 1;
}

void	destroyer(t_data *mlx)
{
	perror("an error occured\n");
	mlx_destroy_image(mlx->mlx, mlx->img);
	mlx_destroy_display(mlx->mlx);
	mlx_destroy_window(mlx->mlx, mlx->window);
	exit(0);
}

void	fract(t_data *mlx, char **str)
{
	mlx->mlx = mlx_init();
	if (!mlx->mlx)
		destroyer(mlx);
	mlx->window = mlx_new_window(mlx->mlx, WIDTH, HEIGHT, "fractal");
	if (!mlx->window)
		destroyer(mlx);
	mlx->img = mlx_new_image(mlx->mlx, WIDTH, HEIGHT);
	if (!mlx->img)
		destroyer(mlx);
	mlx->addr = mlx_get_data_addr(mlx->img, &mlx->bpp, &mlx->line_length,
			&mlx->indean);
	if (!mlx->addr)
		destroyer(mlx);
	init(mlx, str);
	managing(mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   initial.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/20 20:34:14 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:03 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	init(t_data *mlx, char **str)
{
	mlx->red = 0;
	mlx->blue = 0;
	mlx->green = 0;
	mlx->r_value = 0;
	mlx->g_value = 0;
	mlx->b_value = 0;
	mlx->iteration = 30;
	mlx->max = 2;
	mlx->min = -2;
	mlx->fractal = str;
	mlx->x = 0;
	mlx->y = 0;
	mlx->zoom = 1;
}

void	destroyer(t_data *mlx)
{
	perror("an error occured\n");
	mlx_destroy_image(mlx->mlx, mlx->img);
	mlx_destroy_display(mlx->mlx);
	mlx_destroy_window(mlx->mlx, mlx->window);
	exit(0);
}

void	fract(t_data *mlx, char **str)
{
	mlx->mlx = mlx_init();
	if (!mlx->mlx)
		destroyer(mlx);
	mlx->window = mlx_new_window(mlx->mlx, WIDTH, HEIGHT, "fractal");
	if (!mlx->window)
		destroyer(mlx);
	mlx->img = mlx_new_image(mlx->mlx, WIDTH, HEIGHT);
	if (!mlx->img)
		destroyer(mlx);
	mlx->addr = mlx_get_data_addr(mlx->img, &mlx->bpp, &mlx->line_length,
			&mlx->indean);
	if (!mlx->addr)
		destroyer(mlx);
	init(mlx, str);
	managing(mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   julia.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/17 21:55:09 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:09 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	r_julia(t_complex c, int x, int y, t_data *data)
{
	int				it;
	t_complex		tmp;
	t_complex		z;
	t_complex		cte;

	cte.i = c.i;
	cte.r = c.r;
	z.i = scale((double)y, data->min, data->max, HEIGHT) * data->zoom + data->y;
	z.r = scale((double)x, data->min, data->max, WIDTH) * data->zoom + data->x;
	it = 0;
	colors(data);
	while (it < data->iteration)
	{
		tmp.r = z.r;
		z.r = ((z.r) * (z.r) - (z.i) * (z.i)) + cte.r;
		z.i = (2 * tmp.r * z.i) + cte.i;
		if ((z.r) * (z.r) + (z.i) * (z.i) >= 4)
			return (put_pixel(data, x, y,
					argb(0, data->red, data->green, data->blue)), 0);
		it++;
		data->red += 10;
		data->blue += 10;
		data->green += 10;
	}
	return (put_pixel(data, x, y, argb(0, 255, 255, 255)), 1);
}

void	julia(double r, double i, t_data *data)
{
	int			y;
	int			x;
	t_complex	c;

	y = 0;
	c.i = i;
	c.r = r;
	while (y < HEIGHT)
	{
		x = 0;
		while (x < WIDTH)
		{
			r_julia(c, x, y, data);
			x++;
		}
		y++;
	}
	mlx_put_image_to_window(data->mlx, data->window, data->img, 0, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main_bonus.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/23 20:21:04 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:14 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	main(int c, char **v)
{
	t_data	data;

	if (c > 2)
	{
		write(1, "takes no args!!\n", 16);
		exit(0);
	}
	fract(&data, v);
	burning(&data);
	mlx_loop(data.mlx);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 09:36:55 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:19 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	main(int c, char **v)
{
	t_data	data;

	if (c < 2 || c > 4)
		handler();
	if (!(check_par(v, c)))
		exit(0);
	fract(&data, v);
	if (v[1][0] == '2')
		ft_render(v, &data);
	else if (v[1][0] == '1')
		ft_render(v, &data);
	mlx_loop(data.mlx);
	return (0);
}
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/01/12 14:34:35 by aaamam            #+#    #+#              #
#    Updated: 2024/01/25 13:13:24 by aaamam           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME = fractol

NAME_BONUS = fractol_bonus

SRC = mandelbrot.c render.c events.c main.c tools.c julia.c initial.c parcing.c

MLX =  -Lminilibx-linux -lmlx_Linux -lX11 -lXext -lm

CFLAGS = -Wall -Werror -Wextra

CC = cc

B_C = render_bonus.c events_bonus.c tools_bonus.c init_bonus.c burning_ship.c main_bonus.c

HEADER = fractol.h

.c.o:
	${CC} ${CFLAGS} -c $< -o ${<:.c=.o}

${NAME}: ${SRC} ${HEADER}
		@${CC} ${SRC} ${CFLAGS} -o ${NAME} $(MLX)
		@echo "Your FrAcToL is reaDy"

${NAME_BONUS}: ${B_C} ${HEADER}
		@${CC} ${CFLAGS} ${B_C} ${MLX} -o ${NAME_BONUS}
		@echo "Your BurNIng ShIp is reaDy"

bonus: ${NAME_BONUS}

clean:
	@rm -rf ${NAME}
	@echo "FrAcToL ReMovEd"

fclean:
	@rm -rf ${NAME} ${NAME_BONUS}
	@echo "All ReMoVed"

all: ${NAME} bonus

re: fclean all
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mandelbrot.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 08:51:36 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:29 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	mandelbrot_eq(int x, int y, t_data *m)
{
	int			it;
	t_complex	tmp;
	t_complex	z;
	t_complex	cte;

	cte.i = scale((double)y, m->min, m->max, HEIGHT) * m->zoom + m->y;
	cte.r = scale((double)x, m->min, m->max, WIDTH) * m->zoom + m->x;
	z.i = 0;
	z.r = 0;
	it = 0;
	colors(m);
	while (it++ <= m->iteration)
	{
		tmp.r = (z.r);
		z.r = ((z.r) * (z.r) - (z.i) * (z.i)) + cte.r;
		z.i = (2 * tmp.r * z.i) + cte.i;
		if (fabs((z.r) * (z.r) + (z.i) * (z.i)) >= 4)
			return (put_pixel(m, x, y,
					argb(0, m->red, m->green, m->blue)), 0);
		m->red += 10;
		m->blue += 10;
		m->green += 10;
	}
	return (put_pixel(m, x, y, 0x0ffffff), 1);
}

void	mandelbrot(t_data *data)
{
	int		y;
	int		x;

	y = 0;
	while (y < HEIGHT)
	{
		x = 0;
		while (x < WIDTH)
		{
			mandelbrot_eq(x, y, data);
			x++;
		}
		y++;
	}
	mlx_put_image_to_window(data->mlx, data->window, data->img, 0, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parcing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/21 11:18:33 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:39 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	handler(void)
{
	write(1, "invalid inputs!\n", 16);
	write(1, "USAGE: ./fractol <number of the fractal> \n", 42);
	write(1, "menu:\n1 ---mandelbrot\n2 ---julia\n", 34);
	write(1, "for julia specify the constant C <real> <imaginary>\n", 52);
	exit(0);
}

int	k_color(int key, t_data *mlx)
{
	if (key == XK_a)
		return (mlx->r_value += 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_s)
		return (mlx->g_value += 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_d)
		return (mlx->b_value += 15, ft_render(mlx->fractal, mlx), 0);
	if (key == XK_q)
		return (mlx->r_value -= 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_w)
		return (mlx->g_value -= 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_e)
		return (mlx->b_value -= 15, ft_render(mlx->fractal, mlx), 0);
	return (0);
}

int	param(char *ch)
{
	int	i;
	int	c;

	i = 0;
	c = 0;
	while (ch[i])
	{
		if (ch[i] >= '0' && ch[i] <= '9')
			c++;
		i++;
	}
	if (c == 0)
		return (0);
	return (1);
}

int	isnum(char *str)
{
	int	len;
	int	c;

	len = 0;
	c = 0;
	while (str[len])
	{
		if ((str[len] >= '0' && str[len] <= '9') || str[len] == '-' || \
			str[len] == '.' || str[len] == '+')
			len++;
		else
			return (0);
	}
	len = 0;
	while (str[len])
	{
		if (str[len] == '-' || str[len] == '.' || str[len] == '+')
			c++;
		if (c > 2 || !param(str))
			return (0);
		len++;
	}
	return (1);
}

int	check_par(char **str, int c)
{
	int	len;

	len = 0;
	while (str[1][len])
		len++;
	if (len != 1)
		return (handler(), 0);
	if (str[1][0] < '1' || str[1][0] > '2')
		return (handler(), 0);
	if (str[1][0] == '2')
	{
		if (c != 4)
			handler();
		if (!(isnum(str[2])) || !(isnum(str[3])) || !(ft_strchr(str[2]) || \
		!(ft_strchr(str[3]))))
			return (handler(), 0);
	}
	else if (c > 2)
		handler();
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   render_bonus.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 08:47:35 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:43 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

double	scale(double n, double min, double max, double old_max)
{
	return ((max - min) * (n - 0) / (old_max) + min);
}

unsigned int	argb(unsigned int a, unsigned int r, unsigned int g,
					unsigned int b)
{
	return (a << 24 | r << 16 | g << 8 | b);
}

void	put_pixel(t_data *data, int x, int y, unsigned int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bpp / 8));
	*(unsigned int *)dst = color;
}

void	colors(t_data *mlx)
{
	mlx->red = 0 + mlx->r_value;
	mlx->blue = 0 + mlx->b_value;
	mlx->green = 0 + mlx->g_value;
}

void	ft_render(char **str, t_data *mlx)
{
	(void)str;
	burning(mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   render.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 08:47:35 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:46 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

double	scale(double n, double min, double max, double old_max)
{
	return ((max - min) * (n - 0) / (old_max) + min);
}

unsigned int	argb(unsigned int a, unsigned int r, unsigned int g,
					unsigned int b)
{
	return (a << 24 | r << 16 | g << 8 | b);
}

void	put_pixel(t_data *data, int x, int y, unsigned int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bpp / 8));
	*(unsigned int *)dst = color;
}

void	colors(t_data *mlx)
{
	mlx->red = 0 + mlx->r_value;
	mlx->blue = 0 + mlx->b_value;
	mlx->green = 0 + mlx->g_value;
}

void	ft_render(char **str, t_data *mlx)
{
	if (str[1][0] == '1')
		mandelbrot(mlx);
	else if (str[1][0] == '2')
		julia(ft_atod(str[2]), ft_atod(str[3]), mlx);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tools_bonus.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 10:38:58 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:50 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	ft_putchar_fd(char c)
{
	write(1, &c, 1);
}

int	ft_strchr(char *s)
{
	size_t	i;

	i = 0;
	while (s[i])
	{
		if (s[i] >= '0' || s[i] <= '9')
			return (1);
		i++;
	}
	return (0);
}

void	ft_putnbr_fd(int n)
{
	if (n < 0)
	{
		ft_putchar_fd('-');
		n = -(n);
	}
	if (n >= 10)
	{
		ft_putnbr_fd(n / 10);
		ft_putnbr_fd(n % 10);
	}
	else
		ft_putchar_fd(n +48);
}

int	k_color(int key, t_data *mlx)
{
	if (key == XK_a)
		return (mlx->r_value += 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_s)
		return (mlx->g_value += 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_d)
		return (mlx->b_value += 15, ft_render(mlx->fractal, mlx), 0);
	if (key == XK_q)
		return (mlx->r_value -= 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_w)
		return (mlx->g_value -= 15, ft_render(mlx->fractal, mlx), 0);
	else if (key == XK_e)
		return (mlx->b_value -= 15, ft_render(mlx->fractal, mlx), 0);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tools.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aaamam <aaamam@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/19 10:38:58 by aaamam            #+#    #+#             */
/*   Updated: 2024/01/25 13:13:54 by aaamam           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	ft_putchar_fd(char c)
{
	write(1, &c, 1);
}

int	ft_strchr(char *s)
{
	size_t	i;

	i = 0;
	while (s[i])
	{
		if (s[i] >= '0' || s[i] <= '9')
			return (1);
		i++;
	}
	return (0);
}

void	ft_putnbr_fd(int n)
{
	if (n < 0)
	{
		ft_putchar_fd('-');
		n = -(n);
	}
	if (n >= 10)
	{
		ft_putnbr_fd(n / 10);
		ft_putnbr_fd(n % 10);
	}
	else
		ft_putchar_fd(n +48);
}

int	ft_atoi(const char *str)
{
	int			sign;
	long long	number;
	size_t		i;

	sign = 1;
	number = 0;
	i = 0;
	while (str[i] >= '0' && str[i] <= '9')
	{
		number = number * 10 + (str[i] - '0');
		i++;
	}
	return (number * sign);
}

double	ft_atod(const char *str)
{
	double	n;
	size_t	i;
	double	n1;
	double	it;

	it = 10.0;
	i = 0;
	n = 0;
	n1 = (double)ft_atoi(str);
	while (str[i] != '.')
		i++;
	if (str[i] == '.')
		i++;
	while (str[i] >= '0' && str[i] <= '9' && str[i])
	{
		n += (double)(str[i] - 48) / it;
		i++;
		it *= 10;
	}
	if (str[0] == '-')
		n *= -1;
	return (n + n1);
}
